plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id "com.diffplug.spotless" version "7.0.2"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation gradleApi()
    implementation "com.squareup.okhttp3:okhttp:4.12.0"
    implementation "org.apache.commons:commons-lang3:3.17.0"
    testImplementation 'com.github.tomakehurst:wiremock-jre8-standalone:3.0.1'
    testImplementation gradleTestKit()
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'io.swagger:swagger-parser:1.0.73'
	compileOnly 'org.projectlombok:lombok:1.18.36'
	annotationProcessor 'org.projectlombok:lombok:1.18.36'
	
	testCompileOnly 'org.projectlombok:lombok:1.18.36'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'
}

spotless {
    java {
        target project.fileTree('src').include('**/*.java')

        googleJavaFormat("1.25.2").aosp().reorderImports(false)

        importOrder("java", "javax", "org", "com", "net", "io", "jakarta", "lombok", "me", "stirling")
        toggleOffOn()
        trimTrailingWhitespace()
        leadingTabsToSpaces()
        endWithNewline()
    }
}

def versionFile = file("version.properties")

// Lese die aktuelle Version aus der Datei
def getVersionFromFile = {
    if (!versionFile.exists()) {
        return "2.0.0"
    }
    def properties = new Properties()
    versionFile.withInputStream { properties.load(it) }
    return properties.getProperty("version", "2.0.0")
}

// Version hochzählen
def incrementVersion = { version ->
    def parts = version.tokenize('.')
    if (parts.size() < 3) return "2.0.0" // Falls defekt, Standard setzen
    def patch = parts[2].toInteger() + 1
    return "${parts[0]}.${parts[1]}.${patch}"
}

// Schreibe die neue Version zurück in die Datei
def setVersionToFile = { newVersion ->
    def properties = new Properties()
    properties.setProperty("version", newVersion)
    versionFile.withWriter { writer -> properties.store(writer, null) }
}

version = getVersionFromFile()
group = 'io.swagger.v2'

tasks.register("incrementVersion") {
    doLast {
        def newVersion = incrementVersion(version)
        setVersionToFile(newVersion)
        println "Neue Version: $newVersion"
    }
}

// Erhöhe die Version nach einem erfolgreichen Build
tasks.named("build") {
    finalizedBy("incrementVersion")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    dependsOn "spotlessApply"
}

tasks.wrapper {
    gradleVersion = "8.12"
    distributionType = Wrapper.DistributionType.ALL
}
